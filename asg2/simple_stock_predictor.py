"""simple_stock_predictor.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/14DQ8HKTXmhHqUm9JsmfvP3uekeWRSwYV
---

This program obtains the stock market closing value of the company Zoom over a 7 month period (January - July)
Using the dataset, it predicts the stock market prices over a 30 day period and displays a chart showing the differences) 

"""

# Install Dependencies 
import datetime as dt
from pandas_datareader import data as web
import numpy as np
import pandas as pd 
from sklearn.tree import DecisionTreeRegressor 
from sklearn.linear_model import LinearRegression 
from sklearn.model_selection import train_test_split 
import matplotlib.pyplot as plt 
plt.style.use('bmh')

# store data in data frame 
start = dt.datetime(2020, 1, 1)
end = dt.datetime(2020, 7, 1)
df = web.DataReader('ZM','yahoo',start,end)

print('Data Sample')
df.head(5) # data sample

# number of trading days in the dataset 
df.shape

# Visualize the close price data 
plt.figure(figsize=(16,8))
plt.title('ZOOM')
plt.xlabel('Days')
plt.ylabel('Close Price (USD)')
plt.plot(df['Close'])
plt.show()

# Get the close price 
df = df[['Close']]
df.tail(2)

# predict price in 'x' days 
future_days = 30

# create new column (target) shifted 'x' units/days up
df['Prediction'] = df[['Close']].shift(-future_days)
df.tail(4) # data sample

# Create the feature data set (x) and convert it to a numpy array, then remove the last 'x' row/days 
X = np.array(df.drop(['Prediction'], 1))[:-future_days]
print(X)

# Create the target data set (y) and convert it to numpy array then get all target values except the last 'n' rows 
Y = np.array(df['Prediction'])[:-future_days]
print(Y)

# Split the dataset into 75% training, 25% testing 
x_train, x_test,y_train,y_test = train_test_split(X,Y,test_size=0.25)

# Create the model - decision tree regressor model 
tree = DecisionTreeRegressor().fit(x_train, y_train)

# Create the linear regression model 
lr = LinearRegression().fit(x_train, y_train)

# get the last 'x' rows of the future dataset 
x_future = df.drop(['Prediction'], 1)[:-future_days]
x_future = x_future.tail(future_days)
x_future = np.array(x_future)
print(x_future)

# show the model tree prediction 
tree_prediction = tree.predict(x_future)
print(tree_prediction)
print()

# Show the model linear reg prediction 
lr_prediction  = lr.predict(x_future)
print(lr_prediction)

# Visualize the Data 

predictions = tree_prediction
valid = df[X.shape[0]:]
valid['Predictions'] = predictions
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Days')
plt.ylabel('Close Price USD')
plt.plot(df['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Sample before predition', 'Actual Value', 'Prediction'])

# Data Visuals

predictions = lr_prediction
valid = df[X.shape[0]:]
valid['Predictions'] = predictions
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Days')
plt.ylabel('Close Price USD')
plt.plot(df['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Sample before prediction', 'Actual Value', 'Prediction'])
